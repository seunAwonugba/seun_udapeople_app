version: 2.1

orbs:
    aws-cli: circleci/aws-cli@2.0.3

commands:
    install_awscli:
        description: install aws
        steps:
            - run:
                  name: install aws
                  command: |
                      curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                      unzip awscliv2.zip
                      sudo ./aws/install
    install_node:
        description: install node13
        steps:
            - run:
                  name: install node13
                  command: |
                      curl -sL https://rpm.nodesource.com/setup_10.x | bash -
                      yum install -y nodejs

    install_ansible:
        description: install ansible
        steps:
            - run:
                  name: install ansible
                  command: |
                      sudo apt update
                      sudo apt install software-properties-common -y
                      sudo add-apt-repository --yes --update ppa:ansible/ansible
                      sudo apt install ansible -y

    destroy-environment:
        description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
        parameters:
            workflow_id:
                default: "${CIRCLE_WORKFLOW_ID:0:7}"
                type: string
        steps:
            - run:
                  name: Destroy backend
                  when: on_fail
                  command: |
                      aws cloudformation delete-stack --stack-name "udapeople-backend-<<parameters.workflow_id>>"
            - run:
                  name: Destroy frontend
                  when: on_fail
                  command: |
                      aws cloudformation delete-stack --stack-name "udapeople-frontend-<<parameters.workflow_id>>"

            - run:
                  name: Destroy s3 bucket
                  when: on_fail
                  command: |
                      aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive

    revert-migrations:
        description: Revert the last migration if successfully run in the current workflow.
        parameters:
            workflow_id:
                default: "${CIRCLE_WORKFLOW_ID:0:7}"
                type: string
        # Add parameter here
        steps:
            - run:
                  name: Revert migrations
                  # Add when this will run
                  command: |
                      export SUCCESS=$(curl --insecure "https://kvdb.io/AD54eAeGt77GiosL7nBac9/migration_<<parameters.workflow_id>>")
                      if(( $SUCCESS==1 ));
                      then
                        cd ~/project/backend
                        npm install
                        npm run migrations:revert
                      fi

jobs:
    build-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [frontend-build]
            - run:
                  name: Build front-end
                  command: |
                      cd frontend
                      npm install
                      npm run build
            - save_cache:
                  paths: [frontend/node_modules]
                  key: frontend-build

    build-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [backend-build]
            - run:
                  name: Back-end build
                  command: |
                      cd backend
                      npm install
                      npm run build
            - save_cache:
                  paths: [backend/node_modules]
                  key: backend-build

    test-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [test-frontend]
            - run:
                  name: Test front end
                  command: |
                      cd frontend
                      npm install
                      npm run test
            - save_cache:
                  paths: [frontend/node_modules]
                  key: test-frontend
              # Checkout code from git
              # Restore from cache
              # Your job code here

    test-backend:
        docker:
            - image: circleci/node:13.8.0
              # Docker image here
        steps:
            - checkout
            - restore_cache:
                  keys: [test-backend]
            - run:
                  name: Test backend
                  command: |
                      cd backend
                      npm install
                      npm run test
            - save_cache:
                  paths: [backend/node_modules]
                  key: test-backend
              # Checkout code from git
              # Restore from cache
              # Your job code here

    scan-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [scan-frontend]
            - run:
                  name: Scan frontend
                  command: |
                      cd frontend
                      npm install
                      npm audit fix --audit-level=critical
              # Checkout code from git
              # Restore from cache
              # Your job code here
            - save_cache:
                  paths: [frontend/node_modules]
                  key: scan-frontend

    scan-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [scan-backend]
            - run:
                  name: Scan backend
                  command: |
                      cd backend
                      npm install
                      npm audit fix --audit-level=critical
              # Checkout code from git
              # Restore from cache
              # Your job code here
            - save_cache:
                  paths: [backend/node_modules]
                  key: scan-backend

    deploy-infrastructure:
        docker:
            # Docker image here that supports AWS CLI
            - image: amazon/aws-cli
        steps:
            # Checkout code from git
            - checkout
            - run: yum install -y tar gzip
            - run:
                  name: Ensure back-end infrastructure exists
                  command: |
                      aws cloudformation deploy \
                      --template-file .circleci/files/backend.yml \
                      --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                      --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

            - run:
                  name: Ensure front-end infrastructure exist
                  command: |
                      aws cloudformation deploy \
                      --template-file .circleci/files/frontend.yml \
                      --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                      --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \

            - run:
                  name: Add back-end ip to ansible inventory
                  command: |
                      aws ec2 describe-instances \
                      --query 'Reservations[*].Instances[*].PublicIpAddress' \
                      --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                      --output text >> inventory
                      cat inventory
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project/.circleci/ansible/inventory.txt
            - destroy-environment
        # Here's where you will add some code to rollback on failure

    configure-infrastructure:
        docker:
            - image: python:3.7-alpine3.11
        # Docker image here that supports Ansible
        steps:
            - checkout
            - add_ssh_keys:
                  fingerprints:
                      ["7a:f5:df:92:cd:6b:30:39:88:0f:21:64:1a:40:6e:a5"]
            - attach_workspace:
                  at: ~/
            - run:
                  name: Install dependencies
                  command: |
                      apk add --update ansible
                      ansible --version
                      pip install awscli
            - run:
                  name: Configure server
                  command: |
                      cat ./.circleci/ansible/inventory.txt
                      export ANSIBLE_HOST_KEY_CHECKING=false
                      ansible-playbook -i ./.circleci/ansible/inventory.txt ./.circleci/ansible/configure-server.yml
            - destroy-environment
        # Here's where you will add some code to rollback on failure

    run-migrations:
        docker:
            - image: circleci/node:13.8.0

        # Docker image here that supports NodeJS
        steps:
            - checkout
            # Checkout code from git
            - run:
                  name: Install aws incase of on fail
                  command: |
                      sudo apt-get update && sudo apt-get install -yy less
                      curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                      unzip awscliv2.zip
                      sudo ./aws/install

            - run:
                  name: Run migrations
                  command: |
                      cd backend
                      npm install
                      npm run migrations > migrations_dump.txt
            - run:
                  name: Send migration results to memstash
                  command: |
                      if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
                      then
                        curl --insecure https://kvdb.io/AD54eAeGt77GiosL7nBac9/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
                      fi
            - revert-migrations
            - destroy-environment
        # Here's where you will add some code to rollback on failure

    deploy-frontend:
        docker:
            - image: amazon/aws-cli
        # Docker image here that supports AWS CLI
        steps:
            - checkout
            - add_ssh_keys:
                  fingerprints:
                      ["7a:f5:df:92:cd:6b:30:39:88:0f:21:64:1a:40:6e:a5"]
            - attach_workspace:
                  at: ~/
            - run:
                  name: install dependencies
                  command: |
                      cd frontend
                      sudo npm install webpack-dev-server -g
                      sudo npm install
            # - install_awscli
            # - install_node
            # - install_ansible

            - run:
                  name: Get backend url
                  command: |
                      # your code here
                      export BACKEND_IP=$(aws ec2 describe-instances \
                      --query 'Reservations[*].Instances[*].PublicIpAddress' \
                      --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                      --output text
                      )
                      export API_URL="http://${BACKEND_IP}:3030"
                      echo "API_URL = ${API_URL}"
                      echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
                      cat frontend/.env
            - run:
                  name: Deploy frontend objects
                  command: |
                      cd frontend
                      sudo npm install -g npm@latest
                      rm -rf node_modules
                      npm install
                      npm run build
                      tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
                      aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            - destroy-environment
            - revert-migrations

        # Here's where you will add some code to rollback on failure

    deploy-backend:
        docker:
            - image: python:3.7-alpine3.11
        # Docker image here that supports Ansible
        steps:
            - checkout
            - add_ssh_keys:
                  fingerprints:
                      ["7a:f5:df:92:cd:6b:30:39:88:0f:21:64:1a:40:6e:a5"]
            - attach_workspace:
                  at: ~/
            # Checkout code from git
            # Add ssh keys with fingerprint
            # attach workspace
            - install_awscli
            - install_node
            - install_ansible

            - run:
                  name: Deploy backend
                  command: |
                      cd backend
                      npm i
                      npm run build
                      cd ..
                      cd .circleci/ansible
                      tar -C backend -czvf artifact.tar.gz .
                      cd .circleci/ansible
                      echo "Contents  of the inventory.txt file is -------"
                      cat inventory.txt
                      ansible-playbook -i inventory.txt deploy-backend.yml
            - destroy-environment
            - revert-migrations

              #   mkdir files
              #   cd files
        # Here's where you will add some code to rollback on failure

#   smoke-test:
#     docker:
#       # Lightweight Docker image
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi

workflows:
    default:
        jobs:
            - build-frontend
            - build-backend
            - test-frontend:
                  requires: [build-frontend]
            - test-backend:
                  requires: [build-backend]
            - scan-backend:
                  requires: [build-backend]
            - scan-frontend:
                  requires: [build-frontend]
            - deploy-infrastructure:
                  requires:
                      [test-frontend, test-backend, scan-frontend, scan-backend]
                  filters:
                      branches:
                          only: [main]
            - configure-infrastructure:
                  requires: [deploy-infrastructure]
            - run-migrations:
                  requires: [configure-infrastructure]
            - deploy-frontend:
                  requires: [run-migrations]
            # - deploy-backend:
            #       requires: [run-migrations]
            # - smoke-test:
            #     requires: [deploy-backend, deploy-frontend]
            # - cloudfront-update:
            #     requires: [smoke-test]
            # - cleanup:
            #     requires: [cloudfront-update]
